#!/usr/bin/zsh

ps_scm_f() {
    local s=
    if [[ -d ".svn" ]] ; then
        local r=$(svn info | sed -n -e '/^Revision: \([0-9]*\).*$/s//\1/p' )
        s="(r$r$(svn status | grep -q -v '^?' && echo -n "*" ))"
    else
        local d=$(git rev-parse --git-dir 2>/dev/null) b= r= a=
        if [[ -n "${d}" ]] ; then
            if [[ -d "${d}/../.dotest" ]] ; then
                if [[ -f "${d}/../.dotest/rebase" ]] ; then
                    r="rebase"
                elif [[ -f "${d}/../.dotest/applying" ]] ; then
                    r="am"
                else
                    r="???"
                fi
                b=$(git symbolic-ref HEAD 2>/dev/null)
            elif [[ -f "${d}/.dotest-merge/interactive" ]] ; then
                r="rebase-i"
                b=$(<${d}/.dotest-merge/head-name)
            elif [[ -d "${d}/../.dotest-merge" ]] ; then
                r="rebase-m"
                b=$(<${d}/.dotest-merge/head-name)
            elif [[ -f "${d}/MERGE_HEAD" ]] ; then
                r="merge"
                b=$(git symbolic-ref HEAD 2>/dev/null )
            elif [[ -f "${d}/BISECT_LOG" ]] ; then
                r="bisect"
                b=$(git symbolic-ref HEAD 2>/dev/null )"???"
            else
                r=""
                b=$(git symbolic-ref HEAD 2>/dev/null )
            fi

            if git status | grep -q '^# Changed but not updated:' ; then
                a="${a}*"
            fi

            if git status | grep -q '^# Changes to be committed:' ; then
                a="${a}+"
            fi

            if git status | grep -q '^# Untracked files:' ; then
                a="${a}?"
            fi

            b=${b#refs/heads/}
            b=${b// }
            [[ -n "${r}${b}${a}" ]] && s="(${r:+${r}:}${b}${a:+${a}})"
        fi
    fi
    s="${s}${ACTIVE_COMPILER}"
    s="${s:+${s} }"
    echo -n "$s"
}

#autoload -Uz vcs_info

#zstyle ':vcs_info:*' enable svn git
#zstyle ':vcs_info:*' check-for-changes true
#zstyle ':vcs_info:*' unstagedstr   '¹'  # display ¹ if there are unstaged changes
#zstyle ':vcs_info:*' stagedstr     '²'  # display ² if there are staged changes
#zstyle ':vcs_info:*' actionformats "(%b|%a:%c-%u)"
#zstyle ':vcs_info:*' formats "(%b%c%u)"
#zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b|%r'

#precmd() {
#    psvar=()
#    vcs_info
#    [[ -n $vcs_info_msg_0_ ]] && psvar[1]="$vcs_info_msg_0_"
#    [[ -n $vcs_info_msg_1_ ]] && psvar[2]="$vcs_info_msg_1_"
#    [[ -n $vcs_info_msg_2_ ]] && psvar[3]="$vcs_info_msg_2_"
#    [[ -n $vcs_info_msg_3_ ]] && psvar[4]="$vcs_info_msg_3_"
#    [[ -n $vcs_info_msg_4_ ]] && psvar[5]="$vcs_info_msg_4_"
#}

#export RPROMPT="%1v"
export RPROMPT=$'$(ps_scm_f)'
